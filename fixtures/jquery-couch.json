{
   "_id": "jquery-couch",
   "type": null,
   "title": "jquery-couch",
   "text": "// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\u000a// use this file except in compliance with the License. You may obtain a copy of\u000a// the License at\u000a//\u000a//   http://www.apache.org/licenses/LICENSE-2.0\u000a//\u000a// Unless required by applicable law or agreed to in writing, software\u000a// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\u000a// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\u000a// License for the specific language governing permissions and limitations under\u000a// the License.\u000a\u000a(function($) {\u000a  $.couch = $.couch || {};\u000a\u000a  function encodeDocId(docID) {\u000a    var parts = docID.split(\"/\");\u000a    if (parts[0] == \"_design\") {\u000a      parts.shift();\u000a      return \"_design/\" + encodeURIComponent(parts.join('/'));\u000a    }\u000a    return encodeURIComponent(docID);\u000a  };\u000a\u000a  function prepareUserDoc(user_doc, new_password) {    \u000a    if (typeof hex_sha1 == \"undefined\") {\u000a      alert(\"creating a user doc requires sha1.js to be loaded in the page\");\u000a      return;\u000a    }\u000a    var user_prefix = \"org.couchdb.user:\";\u000a    user_doc._id = user_doc._id || user_prefix + user_doc.name;\u000a    if (new_password) {\u000a      // handle the password crypto\u000a      user_doc.salt = $.couch.newUUID();\u000a      user_doc.password_sha = hex_sha1(new_password + user_doc.salt);\u000a    }\u000a    user_doc.type = \"user\";\u000a    if (!user_doc.roles) {\u000a      user_doc.roles = []\u000a    }\u000a    return user_doc;\u000a  };\u000a\u000a  var uuidCache = [];\u000a\u000a  $.extend($.couch, {\u000a    urlPrefix: '',\u000a    activeTasks: function(options) {\u000a      ajax(\u000a        {url: this.urlPrefix + \"/_active_tasks\"},\u000a        options,\u000a        \"Active task status could not be retrieved\"\u000a      );\u000a    },\u000a\u000a    allDbs: function(options) {\u000a      ajax(\u000a        {url: this.urlPrefix + \"/_all_dbs\"},\u000a        options,\u000a        \"An error occurred retrieving the list of all databases\"\u000a      );\u000a    },\u000a\u000a    config: function(options, section, option, value) {\u000a      var req = {url: this.urlPrefix + \"/_config/\"};\u000a      if (section) {\u000a        req.url += encodeURIComponent(section) + \"/\";\u000a        if (option) {\u000a          req.url += encodeURIComponent(option);\u000a        }\u000a      }\u000a      if (value === null) {\u000a        req.type = \"DELETE\";        \u000a      } else if (value !== undefined) {\u000a        req.type = \"PUT\";\u000a        req.data = toJSON(value);\u000a        req.contentType = \"application/json\";\u000a        req.processData = false\u000a      }\u000a\u000a      ajax(req, options,\u000a        \"An error occurred retrieving/updating the server configuration\"\u000a      );\u000a    },\u000a    \u000a    session: function(options) {\u000a      options = options || {};\u000a      $.ajax({\u000a        type: \"GET\", url: this.urlPrefix + \"/_session\",\u000a        complete: function(req) {\u000a          var resp = $.httpData(req, \"json\");\u000a          if (req.status == 200) {\u000a            if (options.success) options.success(resp);\u000a          } else if (options.error) {\u000a            options.error(req.status, resp.error, resp.reason);\u000a          } else {\u000a            alert(\"An error occurred getting session info: \" + resp.reason);\u000a          }\u000a        }\u000a      });\u000a    },\u000a\u000a    userDb : function(callback) {\u000a      $.couch.session({\u000a        success : function(resp) {\u000a          var userDb = $.couch.db(resp.info.authentication_db);\u000a          callback(userDb);\u000a        }\u000a      });\u000a    },\u000a\u000a    signup: function(user_doc, password, options) {      \u000a      options = options || {};\u000a      // prepare user doc based on name and password\u000a      user_doc = prepareUserDoc(user_doc, password);\u000a      $.couch.userDb(function(db) {\u000a        db.saveDoc(user_doc, options);\u000a      })\u000a    },\u000a    \u000a    login: function(options) {\u000a      options = options || {};\u000a      $.ajax({\u000a        type: \"POST\", url: this.urlPrefix + \"/_session\", dataType: \"json\",\u000a        data: {name: options.name, password: options.password},\u000a        complete: function(req) {\u000a          var resp = $.httpData(req, \"json\");\u000a          if (req.status == 200) {\u000a            if (options.success) options.success(resp);\u000a          } else if (options.error) {\u000a            options.error(req.status, resp.error, resp.reason);\u000a          } else {\u000a            alert(\"An error occurred logging in: \" + resp.reason);\u000a          }\u000a        }\u000a      });\u000a    },\u000a    logout: function(options) {\u000a      options = options || {};\u000a      $.ajax({\u000a        type: \"DELETE\", url: this.urlPrefix + \"/_session\", dataType: \"json\",\u000a        username : \"_\", password : \"_\",\u000a        complete: function(req) {\u000a          var resp = $.httpData(req, \"json\");\u000a          if (req.status == 200) {\u000a            if (options.success) options.success(resp);\u000a          } else if (options.error) {\u000a            options.error(req.status, resp.error, resp.reason);\u000a          } else {\u000a            alert(\"An error occurred logging out: \" + resp.reason);\u000a          }\u000a        }\u000a      });\u000a    },\u000a\u000a    db: function(name, db_opts) {\u000a      db_opts = db_opts || {};\u000a      var rawDocs = {};\u000a      function maybeApplyVersion(doc) {\u000a        if (doc._id && doc._rev && rawDocs[doc._id] && rawDocs[doc._id].rev == doc._rev) {\u000a          // todo: can we use commonjs require here?\u000a          if (typeof Base64 == \"undefined\") {\u000a            alert(\"please include /_utils/script/base64.js in the page for base64 support\");\u000a            return false;\u000a          } else {\u000a            doc._attachments = doc._attachments || {};\u000a            doc._attachments[\"rev-\"+doc._rev.split(\"-\")[0]] = {\u000a              content_type :\"application/json\",\u000a              data : Base64.encode(rawDocs[doc._id].raw)\u000a            }\u000a            return true;\u000a          }\u000a        }\u000a      };\u000a      return {\u000a        name: name,\u000a        uri: this.urlPrefix + \"/\" + encodeURIComponent(name) + \"/\",\u000a\u000a        compact: function(options) {\u000a          $.extend(options, {successStatus: 202});\u000a          ajax({\u000a              type: \"POST\", url: this.uri + \"_compact\",\u000a              data: \"\", processData: false\u000a            },\u000a            options,\u000a            \"The database could not be compacted\"\u000a          );\u000a        },\u000a        viewCleanup: function(options) {\u000a          $.extend(options, {successStatus: 202});\u000a          ajax({\u000a              type: \"POST\", url: this.uri + \"_view_cleanup\",\u000a              data: \"\", processData: false\u000a            },\u000a            options,\u000a            \"The views could not be cleaned up\"\u000a          );\u000a        },\u000a        compactView: function(groupname, options) {\u000a          $.extend(options, {successStatus: 202});\u000a          ajax({\u000a              type: \"POST\", url: this.uri + \"_compact/\" + groupname,\u000a              data: \"\", processData: false\u000a            },\u000a            options,\u000a            \"The view could not be compacted\"\u000a          );\u000a        },\u000a        create: function(options) {\u000a          $.extend(options, {successStatus: 201});\u000a          ajax({\u000a              type: \"PUT\", url: this.uri, contentType: \"application/json\",\u000a              data: \"\", processData: false\u000a            },\u000a            options,\u000a            \"The database could not be created\"\u000a          );\u000a        },\u000a        drop: function(options) {\u000a          ajax(\u000a            {type: \"DELETE\", url: this.uri},\u000a            options,\u000a            \"The database could not be deleted\"\u000a          );\u000a        },\u000a        info: function(options) {\u000a          ajax(\u000a            {url: this.uri},\u000a            options,\u000a            \"Database information could not be retrieved\"\u000a          );\u000a        },\u000a        changes: function(since, options) {\u000a          options = options || {};\u000a          // set up the promise object within a closure for this handler\u000a          var timeout = 100, db = this, active = true,\u000a            listeners = [],\u000a            promise = {\u000a            onChange : function(fun) {\u000a              listeners.push(fun);\u000a            },\u000a            stop : function() {\u000a              active = false;\u000a            }\u000a          };\u000a          // call each listener when there is a change\u000a          function triggerListeners(resp) {\u000a            $.each(listeners, function() {\u000a              this(resp);\u000a            });\u000a          };\u000a          // when there is a change, call any listeners, then check for another change\u000a          options.success = function(resp) {\u000a            timeout = 100;\u000a            if (active) {\u000a              since = resp.last_seq;\u000a              triggerListeners(resp);\u000a              getChangesSince();\u000a            };\u000a          };\u000a          options.error = function() {\u000a            if (active) {\u000a              setTimeout(getChangesSince, timeout);\u000a              timeout = timeout * 2;\u000a            }\u000a          };\u000a          // actually make the changes request\u000a          function getChangesSince() {\u000a            var opts = $.extend({heartbeat : 10 * 1000}, options, {\u000a              feed : \"longpoll\",\u000a              since : since\u000a            });\u000a            ajax(\u000a              {url: db.uri + \"_changes\"+encodeOptions(opts)},\u000a              options,\u000a              \"Error connecting to \"+db.uri+\"/_changes.\"\u000a            );\u000a          }\u000a          // start the first request\u000a          if (since) {\u000a            getChangesSince();\u000a          } else {\u000a            db.info({\u000a              success : function(info) {\u000a                since = info.update_seq;\u000a                getChangesSince();\u000a              }\u000a            });\u000a          }\u000a          return promise;\u000a        },\u000a        allDocs: function(options) {\u000a          var type = \"GET\";\u000a          var data = null;\u000a          if (options[\"keys\"]) {\u000a            type = \"POST\";\u000a            var keys = options[\"keys\"];\u000a            delete options[\"keys\"];\u000a            data = toJSON({ \"keys\": keys });\u000a          }\u000a          ajax({\u000a              type: type,\u000a              data: data,\u000a              url: this.uri + \"_all_docs\" + encodeOptions(options)\u000a            },\u000a            options,\u000a            \"An error occurred retrieving a list of all documents\"\u000a          );\u000a        },\u000a        allDesignDocs: function(options) {\u000a          this.allDocs($.extend({startkey:\"_design\", endkey:\"_design0\"}, options));\u000a        },\u000a        allApps: function(options) {\u000a          options = options || {};\u000a          var self = this;\u000a          if (options.eachApp) {\u000a            this.allDesignDocs({\u000a              success: function(resp) {\u000a                $.each(resp.rows, function() {\u000a                  self.openDoc(this.id, {\u000a                    success: function(ddoc) {\u000a                      var index, appPath, appName = ddoc._id.split('/');\u000a                      appName.shift();\u000a                      appName = appName.join('/');\u000a                      index = ddoc.couchapp && ddoc.couchapp.index;\u000a                      if (index) {\u000a                        appPath = ['', name, ddoc._id, index].join('/');\u000a                      } else if (ddoc._attachments && ddoc._attachments[\"index.html\"]) {\u000a                        appPath = ['', name, ddoc._id, \"index.html\"].join('/');\u000a                      }\u000a                      if (appPath) options.eachApp(appName, appPath, ddoc);\u000a                    }\u000a                  });\u000a                });\u000a              }\u000a            });\u000a          } else {\u000a            alert(\"Please provide an eachApp function for allApps()\");\u000a          }\u000a        },\u000a        openDoc: function(docId, options, ajaxOptions) {\u000a          options = options || {};\u000a          if (db_opts.attachPrevRev || options.attachPrevRev) {\u000a            $.extend(options, {\u000a              beforeSuccess : function(req, doc) {\u000a                rawDocs[doc._id] = {\u000a                  rev : doc._rev,\u000a                  raw : req.responseText\u000a                };\u000a              }\u000a            });\u000a          } else {\u000a            $.extend(options, {\u000a              beforeSuccess : function(req, doc) {\u000a                if (doc[\"jquery.couch.attachPrevRev\"]) {\u000a                  rawDocs[doc._id] = {\u000a                    rev : doc._rev,\u000a                    raw : req.responseText\u000a                  };\u000a                }\u000a              }\u000a            });\u000a          }\u000a          ajax({url: this.uri + encodeDocId(docId) + encodeOptions(options)},\u000a            options,\u000a            \"The document could not be retrieved\",\u000a            ajaxOptions\u000a          );\u000a        },\u000a        saveDoc: function(doc, options) {\u000a          options = options || {};\u000a          var db = this;\u000a          var beforeSend = fullCommit(options);\u000a          if (doc._id === undefined) {\u000a            var method = \"POST\";\u000a            var uri = this.uri;\u000a          } else {\u000a            var method = \"PUT\";\u000a            var uri = this.uri + encodeDocId(doc._id);\u000a          }\u000a          var versioned = maybeApplyVersion(doc);\u000a          $.ajax({\u000a            type: method, url: uri + encodeOptions(options),\u000a            contentType: \"application/json\",\u000a            dataType: \"json\", data: toJSON(doc),\u000a            beforeSend : beforeSend,\u000a            complete: function(req) {\u000a              var resp = $.httpData(req, \"json\");\u000a              if (req.status == 200 || req.status == 201 || req.status == 202) {\u000a                doc._id = resp.id;\u000a                doc._rev = resp.rev;\u000a                if (versioned) {\u000a                  db.openDoc(doc._id, {\u000a                    attachPrevRev : true,\u000a                    success : function(d) {\u000a                      doc._attachments = d._attachments;\u000a                      if (options.success) options.success(resp);\u000a                    }\u000a                  });\u000a                } else {\u000a                  if (options.success) options.success(resp);\u000a                }\u000a              } else if (options.error) {\u000a                options.error(req.status, resp.error, resp.reason);\u000a              } else {\u000a                alert(\"The document could not be saved: \" + resp.reason);\u000a              }\u000a            }\u000a          });\u000a        },\u000a        bulkSave: function(docs, options) {\u000a          var beforeSend = fullCommit(options);\u000a          $.extend(options, {successStatus: 201, beforeSend : beforeSend});\u000a          ajax({\u000a              type: \"POST\",\u000a              url: this.uri + \"_bulk_docs\" + encodeOptions(options),\u000a              contentType: \"application/json\", data: toJSON(docs)\u000a            },\u000a            options,\u000a            \"The documents could not be saved\"\u000a          );\u000a        },\u000a        removeDoc: function(doc, options) {\u000a          ajax({\u000a              type: \"DELETE\",\u000a              url: this.uri +\u000a                   encodeDocId(doc._id) +\u000a                   encodeOptions({rev: doc._rev})\u000a            },\u000a            options,\u000a            \"The document could not be deleted\"\u000a          );\u000a        },\u000a        bulkRemove: function(docs, options){\u000a          docs.docs = $.each(\u000a            docs.docs, function(i, doc){\u000a              doc._deleted = true;\u000a            }\u000a          );\u000a          $.extend(options, {successStatus: 201});\u000a          ajax({\u000a              type: \"POST\",\u000a              url: this.uri + \"_bulk_docs\" + encodeOptions(options),\u000a              data: toJSON(docs)\u000a            },\u000a            options,\u000a            \"The documents could not be deleted\"\u000a          );\u000a        },\u000a        copyDoc: function(docId, options, ajaxOptions) {\u000a          ajaxOptions = $.extend(ajaxOptions, {\u000a            complete: function(req) {\u000a              var resp = $.httpData(req, \"json\");\u000a              if (req.status == 201) {\u000a                if (options.success) options.success(resp);\u000a              } else if (options.error) {\u000a                options.error(req.status, resp.error, resp.reason);\u000a              } else {\u000a                alert(\"The document could not be copied: \" + resp.reason);\u000a              }\u000a            }\u000a          });\u000a          ajax({\u000a              type: \"COPY\",\u000a              url: this.uri + encodeDocId(docId)\u000a            },\u000a            options,\u000a            \"The document could not be copied\",\u000a            ajaxOptions\u000a          );\u000a        },\u000a        query: function(mapFun, reduceFun, language, options) {\u000a          language = language || \"javascript\";\u000a          if (typeof(mapFun) !== \"string\") {\u000a            mapFun = mapFun.toSource ? mapFun.toSource() : \"(\" + mapFun.toString() + \")\";\u000a          }\u000a          var body = {language: language, map: mapFun};\u000a          if (reduceFun != null) {\u000a            if (typeof(reduceFun) !== \"string\")\u000a              reduceFun = reduceFun.toSource ? reduceFun.toSource() : \"(\" + reduceFun.toString() + \")\";\u000a            body.reduce = reduceFun;\u000a          }\u000a          ajax({\u000a              type: \"POST\",\u000a              url: this.uri + \"_temp_view\" + encodeOptions(options),\u000a              contentType: \"application/json\", data: toJSON(body)\u000a            },\u000a            options,\u000a            \"An error occurred querying the database\"\u000a          );\u000a        },\u000a        list: function(list, view, options) {\u000a          var list = list.split('/');\u000a          var options = options || {};\u000a          var type = 'GET';\u000a          var data = null;\u000a          if (options['keys']) {\u000a            type = 'POST';\u000a            var keys = options['keys'];\u000a            delete options['keys'];\u000a            data = toJSON({'keys': keys });\u000a          }\u000a          ajax({\u000a              type: type,\u000a              data: data,\u000a              url: this.uri + '_design/' + list[0] +\u000a                   '/_list/' + list[1] + '/' + view + encodeOptions(options)\u000a              },\u000a              options, 'An error occured accessing the list'\u000a          );\u000a        },\u000a        view: function(name, options) {\u000a          var name = name.split('/');\u000a          var options = options || {};\u000a          var type = \"GET\";\u000a          var data= null;\u000a          if (options[\"keys\"]) {\u000a            type = \"POST\";\u000a            var keys = options[\"keys\"];\u000a            delete options[\"keys\"];\u000a            data = toJSON({ \"keys\": keys });\u000a          }\u000a          ajax({\u000a              type: type,\u000a              data: data,\u000a              url: this.uri + \"_design/\" + name[0] +\u000a                   \"/_view/\" + name[1] + encodeOptions(options)\u000a            },\u000a            options, \"An error occurred accessing the view\"\u000a          );\u000a        },\u000a        getDbProperty: function(propName, options, ajaxOptions) {\u000a          ajax({url: this.uri + propName + encodeOptions(options)},\u000a            options,\u000a            \"The property could not be retrieved\",\u000a            ajaxOptions\u000a          );\u000a        },\u000a\u000a        setDbProperty: function(propName, propValue, options, ajaxOptions) {\u000a          ajax({\u000a            type: \"PUT\", \u000a            url: this.uri + propName + encodeOptions(options),\u000a            data : JSON.stringify(propValue)\u000a          },\u000a            options,\u000a            \"The property could not be updated\",\u000a            ajaxOptions\u000a          );\u000a        }\u000a      };\u000a    },\u000a\u000a    encodeDocId: encodeDocId, \u000a\u000a    info: function(options) {\u000a      ajax(\u000a        {url: this.urlPrefix + \"/\"},\u000a        options,\u000a        \"Server information could not be retrieved\"\u000a      );\u000a    },\u000a\u000a    replicate: function(source, target, ajaxOptions, repOpts) {\u000a      repOpts = $.extend({source: source, target: target}, repOpts);\u000a      if (repOpts.continuous) {\u000a        ajaxOptions.successStatus = 202;\u000a      }\u000a      ajax({\u000a          type: \"POST\", url: this.urlPrefix + \"/_replicate\",\u000a          data: JSON.stringify(repOpts),\u000a          contentType: \"application/json\"\u000a        },\u000a        ajaxOptions,\u000a        \"Replication failed\"\u000a      );\u000a    },\u000a\u000a    newUUID: function(cacheNum) {\u000a      if (cacheNum === undefined) {\u000a        cacheNum = 1;\u000a      }\u000a      if (!uuidCache.length) {\u000a        ajax({url: this.urlPrefix + \"/_uuids\", data: {count: cacheNum}, async: false}, {\u000a            success: function(resp) {\u000a              uuidCache = resp.uuids\u000a            }\u000a          },\u000a          \"Failed to retrieve UUID batch.\"\u000a        );\u000a      }\u000a      return uuidCache.shift();\u000a    }\u000a  });\u000a\u000a  function ajax(obj, options, errorMessage, ajaxOptions) {\u000a    options = $.extend({successStatus: 200}, options);\u000a    ajaxOptions = $.extend({contentType: \"application/json\"}, ajaxOptions);\u000a    errorMessage = errorMessage || \"Unknown error\";\u000a    $.ajax($.extend($.extend({\u000a      type: \"GET\", dataType: \"json\", cache : !$.browser.msie,\u000a      beforeSend: function(xhr){\u000a        if(ajaxOptions && ajaxOptions.headers){\u000a          for (var header in ajaxOptions.headers){\u000a            xhr.setRequestHeader(header, ajaxOptions.headers[header]);\u000a          }\u000a        }\u000a      },\u000a      complete: function(req) {\u000a        try {\u000a          var resp = $.httpData(req, \"json\");\u000a        } catch(e) {\u000a          if (options.error) {\u000a            options.error(req.status, req, e);\u000a          } else {\u000a            alert(errorMessage + \": \" + e);\u000a          }\u000a          return;\u000a        }\u000a        if (options.ajaxStart) {\u000a          options.ajaxStart(resp);\u000a        }\u000a        if (req.status == options.successStatus) {\u000a          if (options.beforeSuccess) options.beforeSuccess(req, resp);\u000a          if (options.success) options.success(resp);\u000a        } else if (options.error) {\u000a          options.error(req.status, resp && resp.error || errorMessage, resp && resp.reason || \"no response\");\u000a        } else {\u000a          alert(errorMessage + \": \" + resp.reason);\u000a        }\u000a      }\u000a    }, obj), ajaxOptions));\u000a  }\u000a\u000a  function fullCommit(options) {\u000a    var options = options || {};\u000a    if (typeof options.ensure_full_commit !== \"undefined\") {\u000a      var commit = options.ensure_full_commit;\u000a      delete options.ensure_full_commit;\u000a      return function(xhr) {\u000a        xhr.setRequestHeader(\"X-Couch-Full-Commit\", commit.toString());\u000a      };\u000a    }\u000a  };\u000a\u000a  // Convert a options object to an url query string.\u000a  // ex: {key:'value',key2:'value2'} becomes '?key=\"value\"&key2=\"value2\"'\u000a  function encodeOptions(options) {\u000a    var buf = [];\u000a    if (typeof(options) === \"object\" && options !== null) {\u000a      for (var name in options) {\u000a        if ($.inArray(name, [\"error\", \"success\", \"beforeSuccess\", \"ajaxStart\"]) >= 0)\u000a          continue;\u000a        var value = options[name];\u000a        if ($.inArray(name, [\"key\", \"startkey\", \"endkey\"]) >= 0) {\u000a          value = toJSON(value);\u000a        }\u000a        buf.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(value));\u000a      }\u000a    }\u000a    return buf.length ? \"?\" + buf.join(\"&\") : \"\";\u000a  }\u000a\u000a  function toJSON(obj) {\u000a    return obj !== null ? JSON.stringify(obj) : null;\u000a  }\u000a\u000a})(jQuery);\u000a",
   "tags": [
       "systemConfig"
   ]
}