{"text": "/***\n|''Name''|CouchDBAdaptor|\n|''Description''|adaptor for interacting with CouchDB|\n|''Author:''|FND|\n|''Version''|0.1.0|\n|''Status''|@@experimental@@|\n|''Source''|[TBD]|\n|''CodeRepository''|[TBD]|\n|''License''|[[BSD|http://www.opensource.org/licenses/bsd-license.php]]|\n|''CoreVersion''|2.5|\n|''Keywords''|serverSide CouchDB|\n!Code\n***/\n//{{{\n(function($) {\n\nvar adaptor = config.adaptors.couchdb = function() {};\nadaptor.prototype = new AdaptorBase();\n\nadaptor.serverType = \"couchdb\";\nadaptor.serverLabel = \"CouchDB\";\nadaptor.mimeType = \"application/json\";\n\nadaptor.prototype.putTiddler = function(tiddler, context, userParams, callback) {\n\tvar fields = tiddler.fields;\n\tcontext = this.setContext(context, userParams, callback);\n\tcontext.title = tiddler.title;\n\tcontext.tiddler = tiddler;\n\tcontext.host = context.host || this.fullHostName(fields[\"server.host\"]);\n\tcontext.workspace = context.workspace || fields[\"server.workspace\"];\n\tvar payload = {\n\t\ttype: fields[\"server.content-type\"] || null,\n\t\ttitle: tiddler.title,\n\t\tmodified: tiddler.modified? tiddler.modified.convertToYYYYMMDDHHMM() : '',\n\t\tcreated: tiddler.created? tiddler.created.convertToYYYYMMDDHHMM() : '',\n\t\tcreator: tiddler.creator,\n\t\tmodifier: tiddler.modifier,\n\t\ttext: tiddler.text,\n\t\ttags: tiddler.tags,\n\t\tfields: $.extend({}, fields)\n\t};\n\tif(tiddler.created) {\n\t\tpayload.created = tiddler.created;\n\t}\n\tif(tiddler.creator) {\n\t\tpayload.creator = tiddler.creator;\n\t}\n\tdelete payload.fields.changecount;\n\t$.each(payload.fields, function(key, value) {\n\t\tif(key.indexOf(\"server.\") == 0) {\n\t\t\tdelete payload.fields[key];\n\t\t}\n\t});\n\n\tvar options = {\n\t\turl: context.host + \"/\" + encodeURIComponent(context.workspace),\n\t\ttype: null,\n\t\tcontentType: adaptor.mimeType,\n\t\tdata: $.toJSON(payload),\n\t\tsuccess: function(data, status, xhr) {\n\t\t\tcontext.responseData = data;\n\t\t\tadaptor.putTiddlerCallback(xhr.status, context,\n\t\t\t\txhr.responseText, options.url, xhr);\n\t\t},\n\t\terror: function(xhr, error, exc) {\n\t\t\tadaptor.putTiddlerCallback(xhr.status, context,\n\t\t\t\txhr.responseText, options.url, xhr);\n\t\t}\n\t};\n\tvar id = fields[\"server.id\"];\n\tif(id) {\n\t\toptions.url += \"/\" + id;\n\t\toptions.type = \"PUT\";\n\t\tpayload._id = fields[\"server.id\"];\n\t\tpayload._rev = fields[\"server.page.revision\"];\n\t\toptions.data = $.toJSON(payload);\n\t} else {\n\t\toptions.type = \"POST\";\n\t}\n\treturn $.ajax(options);\n};\n\nadaptor.putTiddlerCallback = function(status, context, responseText, uri, xhr) {\n\tcontext.status = [201, 202].contains(xhr.status);\n\tcontext.statusText = xhr.statusText;\n\tcontext.httpStatus = xhr.status;\n\tif(context.responseData) {\n\t\tvar resp = $.evalJSON(context.responseData);\n\t\tvar fields = context.tiddler.fields;\n\t\tfields[\"server.id\"] = resp.id;\n\t\tfields[\"server.page.revision\"] = resp.rev;\n\t}\n\tif(context.callback) {\n\t\tcontext.callback(context, context.userParams);\n\t}\n};\n\n// delete an individual tiddler\nadaptor.prototype.deleteTiddler = function(tiddler, context, userParams, callback) {\n\tcontext = this.setContext(context, userParams, callback);\n\tcontext.title = tiddler.title; // XXX: not required!?\n\tvar uriTemplate = \"%0/%1/%2?rev=%3\";\n\tcontext.host = context.host || this.fullHostName(tiddler.fields[\"server.host\"]);\n\tcontext.workspace = context.workspace || tiddler.fields[\"server.workspace\"];\n\t//if(!bag) {\n\t//\treturn adaptor.noBagErrorMessage;\n\t//}\n\tvar uri = uriTemplate.format([context.hot, adaptor.normalizeTitle(context.workspace),\n\t\tadaptor.normalizeTitle(tiddler.fields[\"server.id\"]),tiddler.fields[\"server.page.revision\"]]);\n\tvar req = httpReq(\"DELETE\", uri, adaptor.deleteTiddlerCallback, context, null,\n\t\tnull, null, null, null, true);\n\treturn typeof req == \"string\" ? req : true;\n};\n\nadaptor.deleteTiddlerCallback = function(status, context, responseText, uri, xhr) {\n\tvar resp = $.evalJSON(xhr.responseText);\n\tcontext.status = resp[\"ok\"] == true;\n\tcontext.statusText = xhr.statusText;\n\tcontext.httpStatus = xhr.status;\n\tif(context.callback) {\n\t\tcontext.callback(context, context.userParams);\n\t}\n};\n\nadaptor.normalizeTitle = function(title) {\n\treturn encodeURIComponent(title);\n};\n\n// since the document id is currently indepedent of tiddler title, we can simply update the document on renames by saving the new copy\nadaptor.prototype.moveTiddler = adaptor.prototype.putTiddler;\n\n})(jQuery);\n//}}}\n", "tags": ["systemConfig"], "title": "CouchdbAdaptor"}
